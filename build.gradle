plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = GROUP
version = VERSION

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getNexusUsername() {
    return rootProject.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : System.getenv('NEXUS_USERNAME')
}

def getNexusPassword() {
    return rootProject.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : System.getenv('NEXUS_PASSWORD')
}

def shouldSignRelease() {
    return project.hasProperty('SIGN_PUBLISH')
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()

    maven {
        url('http://first.wpi.edu/FRC/roborio/maven/release')
    }
    maven {
        url('https://oss.sonatype.org/content/repositories/snapshots')
    }

    mavenLocal()
}

dependencies {
    compile group: 'com.flash3388.flashlib', name: 'flashlib', version: '2.0.0-beta.7'

    compile group: 'edu.wpi.first.wpilibj', name: 'wpilibj-java', version: '2019.4.1'
    compile group: 'edu.wpi.first.hal', name: 'hal-java', version: '2019.4.1'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.7.22'
}

jar {
    baseName 'flashlib-frc'
}

task createSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    baseName 'flashlib-frc'
    classifier = 'sources'
}

task createJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    baseName 'flashlib-frc'
    classifier = 'javadoc'
}

task flashlibFrcAll(type: Jar, dependsOn: build) {
    dependsOn createSources
    dependsOn createJavadoc

    archiveName = 'flashlib-frc-all.jar'
    destinationDir = rootProject.buildDir

    from files(project.sourceSets.main.output)
    from files(project.sourceSets.main.allSource)
    from files(project.javadoc.destinationDir)
}

publishing {
    publications {
        mavenFlashlib(MavenPublication) {
            from components.java

            artifact createJavadoc
            artifact createSources

            pom {
                name = 'FlashFRC'
                description = 'FRC plugin for FlashLib'
                url = 'https://github.com/Flash3388/FlashFRC'

                licenses {
                    license {
                        name = 'BSD 3-Clause License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }

                developers {
                    developer {
                        id = 'tomtzook'
                        name = 'Tom Tzook'
                        email = 'tomtzook@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/Flash3388/FlashFRC.git'
                    developerConnection = 'scm:git:ssh://github.com/Flash3388/FlashFRC.git'
                    url = 'https://github.com/Flash3388/FlashFRC'
                }
            }
        }
    }

    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

if (shouldSignRelease()) {
    signing {
        sign publishing.publications.mavenFlashlib
    }
}